from scapy.all import ICMP, IP, TCP, sr1

# 1. Host Discovery
def discover_hosts(network):
    for i in range(1, 255):
        ip = f"{network}.{i}"
        packet = IP(dst=ip)/ICMP()
        response = sr1(packet, timeout=1, verbose=0)
        if response:
            print(f"Host {ip} is live")

discover_hosts("192.168.1")


# 2. Scan Techniques

# Example of SYN Scan (Half-open scan)
def syn_scan(target_ip, target_port):
    packet = IP(dst=target_ip)/TCP(dport=target_port, flags="S")
    response = sr1(packet, timeout=1, verbose=0)
    if response and response.haslayer(TCP) and response.getlayer(TCP).flags == 18:
        print(f"Port {target_port} is open on {target_ip}")

syn_scan("192.168.1.1", 80)


# 3. Port Specification and Scan Order
ports = [22, 80, 443, 8080]

def scan_ports(target_ip):
    for port in ports:
        syn_scan(target_ip, port)

scan_ports("192.168.1.1")


# 4. Service or Version Detection
def detect_service(target_ip, target_port):
    packet = IP(dst=target_ip)/TCP(dport=target_port, flags="S")
    response = sr1(packet, timeout=1, verbose=0)
    if response and response.haslayer(TCP):
        print(f"Service detected on {target_ip}:{target_port}")

detect_service("192.168.1.1", 80)


# 5. Script Scan (Using advanced or custom scripts)
# Example: Create a function to check multiple ports or services by modifying the above examples or integrating existing scripts.

# 6. OS Detection (Using TCP/IP fingerprinting)
def os_detection(target_ip):
    packet = IP(dst=target_ip)/TCP(dport=80, flags="S")
    response = sr1(packet, timeout=1, verbose=0)
    if response:
        ttl = response.ttl
        if ttl <= 64:
            print(f"Possibly Linux or Unix OS on {target_ip}")
        elif ttl > 64:
            print(f"Possibly Windows OS on {target_ip}")

os_detection("192.168.1.1")


# 7. Timing and Performance (Adjusting scan timing)
def timed_scan(target_ip, target_port):
    packet = IP(dst=target_ip)/TCP(dport=target_port, flags="S")
    response = sr1(packet, timeout=2, verbose=0)  # 2-second timeout
    if response:
        print(f"Port {target_port} on {target_ip} is open.")

timed_scan("192.168.1.1", 80)


# 8. Evasion and Spoofing (Source IP Spoofing)
def spoof_scan(target_ip, spoof_ip, target_port):
    packet = IP(src=spoof_ip, dst=target_ip)/TCP(dport=target_port, flags="S")
    response = sr1(packet, timeout=1, verbose=0)
    if response:
        print(f"Port {target_port} is open on {target_ip} (spoofed IP {spoof_ip})")

spoof_scan("192.168.1.1", "192.168.1.100", 80)


# 9. Output (Capturing and printing results)
def scan_and_output(target_ip, target_port):
    packet = IP(dst=target_ip)/TCP(dport=target_port, flags="S")
    response = sr1(packet, timeout=1, verbose=0)
    if response:
        print(f"Port {target_port} is open on {target_ip}")
    else:
        print(f"Port {target_port} is closed on {target_ip}")

scan_and_output("192.168.1.1", 80)


# 10. Target Specification (Scanning multiple targets)
def scan_multiple_targets(target_ips):
    for target_ip in target_ips:
        for port in range(20, 25):
            scan_and_output(target_ip, port)

scan_multiple_targets(["192.168.1.1", "192.168.1.2"]
