

import argparse
import nmap
import json

# Host Discovery
def discover_hosts(target):
    print(f"Scanning {target} for active hosts...")
    nm = nmap.PortScanner()
    nm.scan(hosts=target, arguments='-sn')  # Ping scan
    hosts = nm.all_hosts()
    print(f"Found active hosts: {hosts}")
    return hosts

# Port Scanning
def scan_ports(target, ports):
    print(f"Scanning ports on {target}...")
    nm = nmap.PortScanner()
    nm.scan(target, ports)
    for host in nm.all_hosts():
        print(f"Host: {host} ({nm[host].hostname() if nm[host].hostname() else 'No hostname'})")
        print(f"State: {nm[host].state()}")
        for proto in nm[host].all_protocols():
            print(f"Protocol: {proto}")
            lport = nm[host][proto].keys()
            for port in lport:
                print(f"Port: {port}\tState: {nm[host][proto][port]['state']}")
    return nm

# Service Version Detection
def service_version_detection(target):
    print(f"Scanning service versions on {target}...")
    nm = nmap.PortScanner()
    nm.scan(target, arguments='-sV')  # Service version detection
    for host in nm.all_hosts():
        print(f"Host: {host} ({nm[host].hostname() if nm[host].hostname() else 'No hostname'})")
        for proto in nm[host].all_protocols():
            print(f"Protocol: {proto}")
            lport = nm[host][proto].keys()
            for port in lport:
                print(f"Port: {port} | Service: {nm[host][proto][port]['name']} | Version: {nm[host][proto][port]['version']}")
    return nm

# Main function that maps commands
def main():
    # Initialize the argument parser
    parser = argparse.ArgumentParser(description="Network scanning tool")
    
    # Add commands (subcommands)
    subparsers = parser.add_subparsers(dest='command')

    # Host Discovery Command
    subparsers.add_parser('network', help="Discover active hosts in a network")
    
    # Port Scanning Command
    port_parser = subparsers.add_parser('scan', help="Scan specific ports")
    port_parser.add_argument('target', help="Target IP or range to scan")
    port_parser.add_argument('ports', help="Port range to scan (e.g., 1-1024, 80, 443)")

    # Service Version Detection Command
    subparsers.add_parser('service', help="Detect service versions on open ports")
    
    # Parse the arguments
    args = parser.parse_args()

    # Command handling based on the input
    if args.command == 'network':
        target = input("Enter the network or IP range (e.g., 192.168.1.0/24): ")
        discover_hosts(target)
    elif args.command == 'scan':
        scan_ports(args.target, args.ports)
    elif args.command == 'service':
        service_version_detection(args.target)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
