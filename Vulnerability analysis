from nessrest import nessus
import time

# Define Nessus server details
url = "https://<nessus-server>:8834"  # Replace with your Nessus server URL
access_key = "<your-access-key>"
secret_key = "<your-secret-key>"

# Step 1: Authenticate and get session token
nessus_connection = nessus.Nessus(url, access_key, secret_key)

# Check if authentication was successful
if not nessus_connection.is_authenticated():
    print("Failed to authenticate with Nessus")
    exit()

# Step 2: Get Scan Policies (optional, to pick a policy)
scan_policies = nessus_connection.get_policies()
print("Available Scan Policies:")
for policy in scan_policies:
    print(f"{policy['name']} - {policy['id']}")

# Choose a scan policy ID (for example, '1')
scan_policy_id = '<scan-policy-id>'  # Replace with an actual scan policy ID

# Step 3: Define Scan Targets
scan_data = {
    'uuid': scan_policy_id,  # Replace with actual policy UUID
    'settings': {
        'name': 'Example Vulnerability Scan',
        'text_targets': '192.168.1.1'  # Replace with target IP or range
    }
}

# Step 4: Start the Scan
response = nessus_connection.create_scan(scan_data)
scan_id = response['scan']['id']
print(f"Scan started successfully with Scan ID: {scan_id}")

# Step 5: Monitor Scan Progress
while True:
    scan_status = nessus_connection.get_scan(scan_id)['scan']['status']
    if scan_status == "completed":
        print("Scan completed successfully.")
        break
    elif scan_status == "running":
        print("Scan is still running...")
    else:
        print(f"Scan status: {scan_status}")
        break

    time.sleep(10)  # Wait before polling again

# Step 6: Retrieve and Analyze Scan Results
hosts = nessus_connection.get_scan_hosts(scan_id)
for host in hosts:
    print(f"Host: {host['hostname']}")
    vulnerabilities = host.get('vulnerabilities', [])
    if vulnerabilities:
        for vuln in vulnerabilities:
            print(f"  Vulnerability: {vuln['plugin_name']} - {vuln['severity']}")
    else:
        print("  No vulnerabilities found.")

# Step 7: Export the Scan Report (optional)
export = nessus_connection.export_scan(scan_id, 'pdf')  # or 'html', 'csv'
export_id = export['file']
print(f"Export initiated. File ID: {export_id}")

# Step 8: Monitor Export Progress
while True:
    export_status = nessus_connection.get_scan_export_status(scan_id, export_id)
    if export_status['status'] == 'ready':
        print(f"Export ready. Download link: {url}/scans/{scan_id}/export/{export_id}/download")
        break
    else:
        print("Export still processing...")
    time.sleep(10)  # Wait before polling agai
